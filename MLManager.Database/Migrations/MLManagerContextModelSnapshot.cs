// <auto-generated />
using System;
using MLManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MLManager.Database.Migrations
{
    [DbContext(typeof(MLManagerContext))]
    partial class MLManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MLManager.Database.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("AccountId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("MLManager.Database.DataItem", b =>
                {
                    b.Property<Guid>("DataItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("data_item_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreationTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<string>("LabelJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("label_json");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer")
                        .HasColumnName("version_id");

                    b.HasKey("DataItemId");

                    b.HasIndex("DatasetId", "VersionId");

                    b.ToTable("data_items");
                });

            modelBuilder.Entity("MLManager.Database.Dataset", b =>
                {
                    b.Property<Guid>("DatasetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreationTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("DatasetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dataset_name");

                    b.HasKey("DatasetId");

                    b.HasIndex("AccountId", "DatasetName")
                        .IsUnique();

                    b.ToTable("datasets");
                });

            modelBuilder.Entity("MLManager.Database.DatasetPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("integer")
                        .HasColumnName("permission_level");

                    b.HasKey("UserId", "DatasetId");

                    b.HasIndex("DatasetId");

                    b.ToTable("dataset_permissions");
                });

            modelBuilder.Entity("MLManager.Database.DatasetSchema", b =>
                {
                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer")
                        .HasColumnName("version_id");

                    b.Property<DateTime>("CreationTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("schema");

                    b.HasKey("DatasetId", "VersionId");

                    b.ToTable("dataset_schemas");
                });

            modelBuilder.Entity("MLManager.Database.JwtSecurity", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime>("LastUpdatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid")
                        .HasColumnName("refresh_token");

                    b.HasKey("DeviceId", "UserId");

                    b.ToTable("jwt_securities");
                });

            modelBuilder.Entity("MLManager.Database.Permission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permission_type");

                    b.Property<DateTime>("CreateTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("integer")
                        .HasColumnName("permission_level");

                    b.HasKey("UserId", "AccountId", "PermissionType");

                    b.HasIndex("AccountId");

                    b.HasIndex("PermissionType");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("MLManager.Database.PermissionTypeEntity", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("PermissionTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("permission_type");

                    b.HasData(
                        new
                        {
                            PermissionTypeId = 1,
                            Name = "Users"
                        },
                        new
                        {
                            PermissionTypeId = 2,
                            Name = "Datasets"
                        },
                        new
                        {
                            PermissionTypeId = 3,
                            Name = "DatasetSchemas"
                        });
                });

            modelBuilder.Entity("MLManager.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("RegistrationTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registration_timestamp")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<DateTime?>("VerifiedEmailTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verified_email_timestamp");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("MLManager.Database.DataItem", b =>
                {
                    b.HasOne("MLManager.Database.Dataset", null)
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLManager.Database.Dataset", b =>
                {
                    b.HasOne("MLManager.Database.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLManager.Database.DatasetPermission", b =>
                {
                    b.HasOne("MLManager.Database.Dataset", null)
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLManager.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLManager.Database.DatasetSchema", b =>
                {
                    b.HasOne("MLManager.Database.Dataset", null)
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MLManager.Database.Permission", b =>
                {
                    b.HasOne("MLManager.Database.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLManager.Database.PermissionTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLManager.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
